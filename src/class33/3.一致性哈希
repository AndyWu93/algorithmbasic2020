一致性哈希
解决增加储存节点时，数据迁移的问题（传统的哈希存储需要全量迁移数据，一致性哈希不需要）

一致性哈希结构：
    确定一下某个哈希函数f，假设MD5
    确定一下哈希值的取值范围，一般是0~2^64-1
    将哈希取值范围想象成一个环，即0前面一个数就是2^64-1
有
    1.拿出所有的存储节点，对每个存储节点的ip计算一下哈希值，分别上环。
    2.对于某一条数据，将数据的哈希key计算出哈希值，看在环上的哪个位置，顺时针找到一个存储节点存下

增加/删除节点时数据迁移代价：
增加节点：
将增加的节点顺时针的下一个节点中的部分数据还给它
删除节点：
将删除的节点的所有数迁移给顺时针的下一个节点

工程实现举例：
    将所有节点的哈希值算出来以后，放入一个数组arr中，将arr排序
    当来了一条数据，计算出哈希值以后，找到arr中比该哈希值大的最左位置，就是需要存储的节点。

几个关键问题：
    只有几个节点，如何保证均分哈希环？（为什么要均分哈希环？保证每个节点管理的哈希值域差不多，从而保证负载均衡）
    只有几个节点，增加/减少了几个节点以后，如何保证均分哈希环？
解决方案：虚拟节点技术
    给每个节点分配1000个虚拟节点，并记好对应关系，将虚拟节点计算出哈希值上环。
    当来了一条数据，计算出哈希值以后，在环上顺时针找到虚拟节点，根据虚拟节点找到实际的存储节点，将数据存上去
    注：存数据时可以带上虚拟节点的id，表示该条记录归属该虚拟节点管理
当增加节点时：
    也是分配1000个虚拟，上环以后找到需要要数据的1000个虚拟节点，将这1000个虚拟节点对应的数据物理迁移。这些数据应该是均匀的分布在其他节点中的
一定是每个机器分配1000个吗？
    也可以根据机器的实际情况，按权重分配虚拟节点