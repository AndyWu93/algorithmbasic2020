1.哈希函数的构成
int f(String arg)
input：任意的String
output：一个整数，范围可以是0~2^64-1、0~2^128-1
2.输入输出
相同的输入一定得到相同的输出
不同的输入可能得到相同的输出（hash碰撞）
3.离散性
输出的值一般都是均匀分布在值域中

问hashMap的增删改查是如何做到复杂度O(1)？
hashMap的结构是数组套链表，数组也叫做桶
因为哈希的离散性，链表的长度一般都差不多
当链表的长度到达阈值，会扩容，桶的数量翻倍，重新计算key的哈希，放到桶中去

有扩容行为如何O(1)?
证明
假设hashMap的桶的长度为1，当链表达到2时就扩容，这是复杂度最高的情况
扩容的时刻分别是
元素个数  2     4    8    16    32   ...  N （一共logN项）
复杂度： O(2) O(4) O(8)  O(16) O(32) ... O(N)
扩容总代价，就是上面的复杂度求和，等比数列求和，最终复杂度O(N)
所以，单个元素代价O(N)/N = O(1)

工程中的hash函数优化了常数时间
比如，
桶的初始长度为16
链表采用红黑树


